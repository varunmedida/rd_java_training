package com.epam.dao;

import java.util.ArrayList;
import java.util.Optional;
import java.util.stream.Collectors;

import com.epam.model.Cart;
import com.epam.model.Category;
import com.epam.model.Product;
import com.epam.model.SubCategory;

public class OnlineShoppingDaoImpl implements OnlineShoppingDao {

	ArrayList<Category> categoryList = new ArrayList<>();
	ArrayList<SubCategory> subCategoryList = new ArrayList<>();
	ArrayList<Product> productList = new ArrayList<>();
	ArrayList<Cart> cartList = new ArrayList<>();

	public OnlineShoppingDaoImpl() {
		// TODO Auto-generated constructor stub
		categoryList.add(new Category(1, "Electronics"));
		categoryList.add(new Category(2, "Fashion"));
		subCategoryList.add(new SubCategory(1, 1, "Mobiles"));
		subCategoryList.add(new SubCategory(1, 2, "Laptops"));
		subCategoryList.add(new SubCategory(1, 3, "Home Appliance"));
		productList.add(new Product(1, 1, "IPhone", 5000, 7));
		productList.add(new Product(1, 2, "Samsung", 4000, 7));
		productList.add(new Product(1, 3, "Asus", 3000, 7));
		productList.add(new Product(2, 4, "Dell", 11000, 7));
		productList.add(new Product(2, 5, "Lenovo", 9000, 7));
		productList.add(new Product(2, 6, "Alien", 15000, 7));
	}

	@Override
	public ArrayList<Category> getAllCategories() {
		// TODO Auto-generated method stub
		return categoryList;
	}

	@Override
	public ArrayList<SubCategory> displaySubCategoriesBasedOnCategory(int categoryOption) {
		// TODO Auto-generated method stub
		ArrayList<SubCategory> filteredList = (ArrayList<SubCategory>) subCategoryList.stream()
				.filter(subCategory -> subCategory.getCategoryId() == categoryOption).collect(Collectors.toList());
		return filteredList;
	}

	@Override
	public ArrayList<Product> diplayProductsBasedOnSubCategory(int subCategoryOption) {
		// TODO Auto-generated method stub
		ArrayList<Product> filteredList = (ArrayList<Product>) productList.stream()
				.filter(product -> product.getSubCategoryId() == subCategoryOption).collect(Collectors.toList());
		return filteredList;
	}

	@Override
	public void addProductToCart(int productOption, int quantityToAdd) {
		// TODO Auto-generated method stub
		Product productToCart=productList.stream().filter(product->product.getProductId()==productOption).findAny().orElse(null);
		Cart productPresentInCart=cartList.stream().filter(cart->cart.getProductId()==productOption).findAny().orElse(null);
		Optional<Product> productOptional=Optional.ofNullable(productToCart);
		Optional<Cart> cartOptional=Optional.ofNullable(productPresentInCart);
		if(productOptional.isPresent()) {
		if(cartOptional.isPresent()) {	
		alreadyPresentInCart(productPresentInCart,productToCart,quantityToAdd);
		}else {
		notPresentInCart(productToCart,quantityToAdd);
		}}
	}

	private void notPresentInCart(Product productToCart, int quantityToAdd) {
		// TODO Auto-generated method stub
		if(quantityToAdd<=productToCart.getQuantityInStock()) {
			cartList.add(new Cart(productToCart.getProductId(), productToCart.getProductName(), productToCart.getProductPrice(), quantityToAdd));
			System.out.println("Product Added to Cart.");
		}else {
			System.err.println("Insufficient Quantity!");
		}
	}

	private void alreadyPresentInCart(Cart productPresentInCart, Product productToCart, int quantityToAdd) {
		// TODO Auto-generated method stub
		if(productPresentInCart.getQuantityAdded()+quantityToAdd<=productToCart.getQuantityInStock()) {
			productPresentInCart.setQuantityAdded(quantityToAdd+productPresentInCart.getQuantityAdded());
			System.out.println("Product already present. Increased quantity.");
		}
	}

}
